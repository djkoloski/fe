#include <string>
#include <iostream>
#include <sstream>
#include <fstream>

#include <clang-c/Index.h>

std::string ReadEntireFile(const std::string &path)
{
	auto input = std::ifstream(path);
	auto inputStr = std::string();

	if (!input.fail())
	{
		input.seekg(0, std::ios::end);
		inputStr.reserve(input.tellg());
		input.seekg(0, std::ios::beg);
		inputStr.assign((std::istreambuf_iterator<char>(input)), std::istreambuf_iterator<char>());
		input.close();
	}

	return inputStr;
}

void ReplaceFileIfChanged(const std::string &path, const std::string &newContents)
{
	auto inputStr = ReadEntireFile(path);

	if (inputStr != newContents)
	{
		auto output = std::ofstream(path);
		output << newContents;
	}
}

int UnitTest()
{
	return 0;
}

static const auto k_usageString =
	"usage: CGen input output [flags]\n"
	"variables:\n"
	"  flags\tThe flags to pass to clang while compiling";

int main(int argc, char **argv)
{
	if (argc < 3)
	{
		std::cout << k_usageString << std::endl;
		return 1;
	}

	if (!strcmp(argv[1], "--run-unit-tests"))
	{
		return UnitTest();
	}

	// TODO: remove after thorough testing
	if (strcmp(argv[1], "D:\\Projects\\Fe\\Test\\Test.h"))
	{
		ReplaceFileIfChanged(argv[2], ReadEntireFile(argv[1]));
		return 0;
	}

	auto output = std::stringstream();

	auto index = clang_createIndex(0, 0);
	auto translationUnit = clang_createTranslationUnitFromSourceFile(
		index,
		argv[1], argc - 3, argv + 3,
		0,
		nullptr);

	auto numDiagnostics = clang_getNumDiagnostics(translationUnit);
	for (auto i = (unsigned int)0; i < numDiagnostics; ++i)
	{
		auto diagnostic = clang_getDiagnostic(translationUnit, i);
		auto string = clang_formatDiagnostic(diagnostic, CXDiagnostic_DisplaySourceLocation);

		std::cout << clang_getCString(string) << std::endl;

		clang_disposeString(string);
		clang_disposeDiagnostic(diagnostic);
	}

	clang_disposeTranslationUnit(translationUnit);
	clang_disposeIndex(index);

	output << "// Generated by CGen. DO NOT EDIT!\n";
	output << "// Source file: " << argv[1] << "\n\n";

	ReplaceFileIfChanged(argv[2], output.str());

	return 0;
}